@page "/Tasks"

@inject IHttpClientFactory _clientFactory

<h3>Tasks</h3>

@if (!string.IsNullOrWhiteSpace(errorString))
{
    <div class="h2">@errorString</div>
}
else if(employeeTasks is null)
{
    <div class="h4">Loading...</div>
}
else
{
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Task</th>
                <th>Start Time</th>
                <th>Deadline</th>
                <th>Assigned To</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var task in employeeTasks)
            {
                <tr>
                    <td>@task.TaskName</td>
                    <td>@task.StartTime</td>
                    <td>@task.Deadline</td>
                    @if(@task.EmployeeId is null){
                        <td>Not Assigned</td>
                    }else{
                        <td>
                            @task.Employee.FirstName @task.Employee.LastName
                        </td>
                    }
                    <td>
                        <a class="btn btn-primary" href="EditTask/@task.Id">
                            <span class="oi oi-pencil" aria-hidden="true"> Edit</span>
                        </a>
                        <a class="btn btn-primary" href="DeleteTask/@task.Id">
                            <span class="oi oi-delete" aria-hidden="true"> Delete</span>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<EmployeeTasksModel> employeeTasks = new List<EmployeeTasksModel>();
    List<EmployeesModel> employees = new List<EmployeesModel>();
    string errorString;

    protected override async Task OnInitializedAsync()
    {
        var client = _clientFactory.CreateClient("EmployeesAPI");

        try
        {
            employeeTasks = await client.GetFromJsonAsync<List<EmployeeTasksModel>>("employeetasks");
            employees = await client.GetFromJsonAsync<List<EmployeesModel>>("employees");
            foreach(var task in employeeTasks)
            {
                if(task.EmployeeId is not null)
                {
                    task.Employee = employees.Where(w => w.Id.Equals(task.EmployeeId)).FirstOrDefault();
                }
            }
            errorString = null;
        }
        catch(Exception ex)
        {
            errorString = ex.Message;
        }
    }
}
